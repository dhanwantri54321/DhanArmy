// SPDX-License-Identifier: MIT
pragma solidity ^0.8.20;

contract RealEstateManagement {
    struct Property {
        address owner;
        string propertyAddress;
        string legalDocuments;
    }

    mapping(uint256 => Property) public properties;
    uint256 public propertyCount;

    event PropertyAdded(uint256 indexed propertyId, address indexed owner, string propertyAddress);
    event OwnershipTransferred(uint256 indexed propertyId, address indexed previousOwner, address indexed newOwner);

    modifier onlyOwner(uint256 propertyId) {
        require(properties[propertyId].owner == msg.sender, "Not the owner");
        _;
    }

    function addProperty(string memory _propertyAddress, string memory _legalDocuments) public {
        Property memory newProperty = Property({
            owner: msg.sender,
            propertyAddress: _propertyAddress,
            legalDocuments: _legalDocuments
        });

        properties[propertyCount] = newProperty;

        emit PropertyAdded(propertyCount, msg.sender, _propertyAddress);

        propertyCount++;
    }

    function transferOwnership(uint256 propertyId, address newOwner) public onlyOwner(propertyId) {
        address previousOwner = properties[propertyId].owner;
        properties[propertyId].owner = newOwner;

        emit OwnershipTransferred(propertyId, previousOwner, newOwner);
    }
}
